                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6b801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Author: Junwei Lan
                            | # ID: PB200111689
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax		# count = 0;
0x034: 6222                 | 	andq %rdx, %rdx		# len <= 0?
0x036: 717801000000000000   | 	jle Done		# if so, goto Done:
0x03f: 30f80100000000000000 | 	irmovq $1, %r8
0x049: 6228                 | 	andq %rdx, %r8
0x04b: 74d600000000000000   | 	jne first
0x054:                      | Loop2:
0x054: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x05e: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x068: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x072: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x07c: 62aa                 | 	andq %r10, %r10
0x07e: 719100000000000000   | 	jle next1
0x087: c0f00100000000000000 | 	iaddq $1, %rax
0x091:                      | next1:
0x091: 62bb                 | 	andq %r11, %r11
0x093: 71a600000000000000   | 	jle next2
0x09c: c0f00100000000000000 | 	iaddq $1, %rax
0x0a6:                      | next2:
0x0a6: c0f71000000000000000 | 	iaddq $16, %rdi
0x0b0: c0f61000000000000000 | 	iaddq $16, %rsi
0x0ba: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x0c4:                      | test:
0x0c4: 765400000000000000   | 	jg Loop2
0x0cd: 707801000000000000   | 	jmp Done
                            | 
0x0d6:                      | first:
0x0d6: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x0e0: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x0ea: 62aa                 | 	andq %r10, %r10
0x0ec: 71ff00000000000000   | 	jle next3
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax
0x0ff:                      | next3:
0x0ff: c0f70800000000000000 | 	iaddq $8, %rdi
0x109: c0f60800000000000000 | 	iaddq $8, %rsi
0x113: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x11d: 70c400000000000000   | 	jmp test
                            | 
0x126:                      | Loop:
0x126: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x130: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x13a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x13c: 714f01000000000000   | 	jle Npos		# if so, goto Npos:
0x145: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x14f:                      | Npos:
0x14f: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x159: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x163: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x16d: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x16f: 762601000000000000   | 	jg Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x178:                      | Done:
0x178: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x179:                      | End:
                            | #/* $end ncopy-ys */
0x179:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x180:                      | 	.align 8
0x180:                      | src:
0x180: ffffffffffffffff     | 	.quad -1
0x188: 0200000000000000     | 	.quad 2
0x190: 0300000000000000     | 	.quad 3
0x198: fcffffffffffffff     | 	.quad -4
0x1a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x1b0:                      | 	.align 16
0x1b0:                      | Predest:
0x1b0: fadebc0000000000     | 	.quad 0xbcdefa
0x1b8:                      | dest:
0x1b8: abefcd0000000000     | 	.quad 0xcdefab
0x1c0: abefcd0000000000     | 	.quad 0xcdefab
0x1c8: abefcd0000000000     | 	.quad 0xcdefab
0x1d0: abefcd0000000000     | 	.quad 0xcdefab
0x1d8:                      | Postdest:
0x1d8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x1e0:                      | .align 8
                            | # Run time stack
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
0x240: 0000000000000000     | 	.quad 0
0x248: 0000000000000000     | 	.quad 0
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
                            | 
0x260:                      | Stack:
