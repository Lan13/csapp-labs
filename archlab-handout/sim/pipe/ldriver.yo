                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f68803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Author: Junwei Lan
                            | # ID: PB200111689
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax		# count = 0;
0x034: 6222                 | 	andq %rdx, %rdx		# len <= 0?
0x036: 717801000000000000   | 	jle Done		# if so, goto Done:
0x03f: 30f80100000000000000 | 	irmovq $1, %r8
0x049: 6228                 | 	andq %rdx, %r8
0x04b: 74d600000000000000   | 	jne first
0x054:                      | Loop2:
0x054: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x05e: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x068: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x072: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x07c: 62aa                 | 	andq %r10, %r10
0x07e: 719100000000000000   | 	jle next1
0x087: c0f00100000000000000 | 	iaddq $1, %rax
0x091:                      | next1:
0x091: 62bb                 | 	andq %r11, %r11
0x093: 71a600000000000000   | 	jle next2
0x09c: c0f00100000000000000 | 	iaddq $1, %rax
0x0a6:                      | next2:
0x0a6: c0f71000000000000000 | 	iaddq $16, %rdi
0x0b0: c0f61000000000000000 | 	iaddq $16, %rsi
0x0ba: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x0c4:                      | test:
0x0c4: 765400000000000000   | 	jg Loop2
0x0cd: 707801000000000000   | 	jmp Done
                            | 
0x0d6:                      | first:
0x0d6: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x0e0: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x0ea: 62aa                 | 	andq %r10, %r10
0x0ec: 71ff00000000000000   | 	jle next3
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax
0x0ff:                      | next3:
0x0ff: c0f70800000000000000 | 	iaddq $8, %rdi
0x109: c0f60800000000000000 | 	iaddq $8, %rsi
0x113: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x11d: 70c400000000000000   | 	jmp test
                            | 
0x126:                      | Loop:
0x126: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x130: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x13a: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x13c: 714f01000000000000   | 	jle Npos		# if so, goto Npos:
0x145: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x14f:                      | Npos:
0x14f: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x159: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x163: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x16d: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x16f: 762601000000000000   | 	jg Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x178:                      | Done:
0x178: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x179:                      | End:
                            | #/* $end ncopy-ys */
0x179:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x180:                      | 	.align 8
0x180:                      | src:
0x180: ffffffffffffffff     | 	.quad -1
0x188: feffffffffffffff     | 	.quad -2
0x190: 0300000000000000     | 	.quad 3
0x198: fcffffffffffffff     | 	.quad -4
0x1a0: 0500000000000000     | 	.quad 5
0x1a8: 0600000000000000     | 	.quad 6
0x1b0: 0700000000000000     | 	.quad 7
0x1b8: f8ffffffffffffff     | 	.quad -8
0x1c0: f7ffffffffffffff     | 	.quad -9
0x1c8: 0a00000000000000     | 	.quad 10
0x1d0: 0b00000000000000     | 	.quad 11
0x1d8: 0c00000000000000     | 	.quad 12
0x1e0: 0d00000000000000     | 	.quad 13
0x1e8: 0e00000000000000     | 	.quad 14
0x1f0: f1ffffffffffffff     | 	.quad -15
0x1f8: f0ffffffffffffff     | 	.quad -16
0x200: efffffffffffffff     | 	.quad -17
0x208: eeffffffffffffff     | 	.quad -18
0x210: edffffffffffffff     | 	.quad -19
0x218: ecffffffffffffff     | 	.quad -20
0x220: 1500000000000000     | 	.quad 21
0x228: 1600000000000000     | 	.quad 22
0x230: 1700000000000000     | 	.quad 23
0x238: e8ffffffffffffff     | 	.quad -24
0x240: 1900000000000000     | 	.quad 25
0x248: e6ffffffffffffff     | 	.quad -26
0x250: 1b00000000000000     | 	.quad 27
0x258: e4ffffffffffffff     | 	.quad -28
0x260: 1d00000000000000     | 	.quad 29
0x268: e2ffffffffffffff     | 	.quad -30
0x270: e1ffffffffffffff     | 	.quad -31
0x278: 2000000000000000     | 	.quad 32
0x280: dfffffffffffffff     | 	.quad -33
0x288: 2200000000000000     | 	.quad 34
0x290: ddffffffffffffff     | 	.quad -35
0x298: dcffffffffffffff     | 	.quad -36
0x2a0: 2500000000000000     | 	.quad 37
0x2a8: daffffffffffffff     | 	.quad -38
0x2b0: 2700000000000000     | 	.quad 39
0x2b8: 2800000000000000     | 	.quad 40
0x2c0: 2900000000000000     | 	.quad 41
0x2c8: d6ffffffffffffff     | 	.quad -42
0x2d0: d5ffffffffffffff     | 	.quad -43
0x2d8: 2c00000000000000     | 	.quad 44
0x2e0: d3ffffffffffffff     | 	.quad -45
0x2e8: d2ffffffffffffff     | 	.quad -46
0x2f0: d1ffffffffffffff     | 	.quad -47
0x2f8: 3000000000000000     | 	.quad 48
0x300: cfffffffffffffff     | 	.quad -49
0x308: ceffffffffffffff     | 	.quad -50
0x310: 3300000000000000     | 	.quad 51
0x318: 3400000000000000     | 	.quad 52
0x320: cbffffffffffffff     | 	.quad -53
0x328: 3600000000000000     | 	.quad 54
0x330: c9ffffffffffffff     | 	.quad -55
0x338: 3800000000000000     | 	.quad 56
0x340: 3900000000000000     | 	.quad 57
0x348: c6ffffffffffffff     | 	.quad -58
0x350: 3b00000000000000     | 	.quad 59
0x358: 3c00000000000000     | 	.quad 60
0x360: c3ffffffffffffff     | 	.quad -61
0x368: 3e00000000000000     | 	.quad 62
0x370: c1ffffffffffffff     | 	.quad -63
0x378: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x380:                      | 	.align 16
0x380:                      | Predest:
0x380: fadebc0000000000     | 	.quad 0xbcdefa
0x388:                      | dest:
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580:                      | Postdest:
0x580: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x588:                      | .align 8
                            | # Run time stack
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
                            | 
0x608:                      | Stack:
